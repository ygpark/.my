[user]
	name = Young-Gi Park
	email = ghostyak@gmail.com

[core]
	editor = vim

[color]
	status=auto
	branch=auto
	interactive=auto
	diff=auto

[alias]
	helpme="!git helpme01 && git helpme02 && git helpme03 && git helpme04 && git helpme05 && git helpme06 && git helpme07 && git helpme08 && git helpme09 && git helpme10 && git helpme11 && git helpme12 && git helpme13 && git helpme14 && git helpme15 && git helpme16 && git helpme17 && git helpme18 && git helpme19 && git helpme20 && git helpme21 && git helpme22 && git helpme23 && git helpme24 && git helpme25 && git helpme26 && git helpme27 && git helpme28 && git helpme29 && git helpme30 && git helpme31 && git helpme32 && git helpme33 && git helpme34 && git helpme35 && git helpme36 && git helpme37 && git helpme38 && git helpme39 && git helpme40 && git helpme41 && git helpme42 && git helpme43"
	helpme01="!echo 'git helpme: 자주 쓰는 명령어 도움말'"
	helpme02="!echo"
	helpme03="!echo '# 기본 명령어'"
	helpme04="!echo"
	helpme05="!echo '	git checkout <branch>                     : 로컬 저장소를 <branch>로 전환'"
	helpme06="!echo '	git checkout <tag>                        : 로컬 저장소를 <tag>로 전환'"
	helpme07="!echo '	git checkout <commit>                     : 로컬 저장소를 <commit>로 전환'"
	helpme08="!echo '	git checkout -b <branch>                  : 새 브랜치 생성 후 그 브랜치로 전환'"
	helpme09="!echo"
	helpme10="!echo '	git add <paths>                           : 스테이징 영역에 등록'"
	helpme11="!echo '	git rm  <paths>                           : 삭제와 동시에 스테이징 영역에 등록'"
	helpme12="!echo '	git mv  <paths>                           : 이동과 동시에 스테이징 영역에 등록'"
	helpme13="!echo '	git unstage <paths>                       : 언스테이징'"
	helpme14="!echo"
	helpme15="!echo '	git commit                                : 스테이징 영역을 로컬 저장소로 밀어넣기'"
	helpme16="!echo '	git commit -m \"한줄 로그\"               : 스테이징 영역을 로컬 저장소로 밀어넣기'"
	helpme17="!echo"
	helpme18="!echo '	git push [<repository> [<refspec>...]]    : 원격 저장소로 밀어넣기'"
	helpme19="!echo '	git pull [<repository> [<refspec>...]]    : 원격 저장소로부터 가져오기'"
	helpme20="!echo"
	helpme21="!echo"
	helpme22="!echo '# 브랜치 & 태그'"
	helpme23="!echo"
	helpme24="!echo '	git branch                                : 브랜치 목록'"
	helpme25="!echo '	git branch <branch>                       : 브랜치 생성'"
	helpme26="!echo '	git branch -d <branch>                    : 브랜치 삭제'"
	helpme27="!echo"
	helpme28="!echo '	git tag                                   : 태그 목록'"
	helpme29="!echo '	git tag <tag>                             : 태그 생성'"
	helpme30="!echo '	git tag -d <tag>                          : 태그 삭제'"
	helpme31="!echo"
	helpme32="!echo '	git merge <branch>                        : <branch>를 현재 브랜치로 합치기'"
	helpme33="!echo '	git merge --abort                         : 병합 중단'"
	helpme34="!echo"
	helpme35="!echo"
	helpme36="!echo '# 로그'"
	helpme37="!echo '	git ls[a] [since..until] [-N] [paths]     : 로그 출력'"
	helpme38="!echo '	git ll[a] [since..until] [-N] [paths]     : 로그 출력 & 파일목록 출력'"
	helpme39="!echo '	git lg[a] [since..until] [-N] [paths]     : 로그 출력 (graph)'"
	helpme40="!echo '	git bm  <path>                            : 라인별 작성자의 이름  출력 (blame)'"
	helpme41="!echo '	git bme <path>                            : 라인별 작성자의 email 출력 (blame)'"
	helpme42="!echo"
	helpme43="!echo"

	br = branch -vv
	bm = blame --date=relative 
	bme = blame --date=relative -e
	ci = commit 
	co = checkout
	st = status
	visual = !gitk
	last = log -1 HEAD

	# 커밋 대기목록에서 제외
	unstage = reset HEAD --

	# 커밋 되돌리기
	undo=reset --hard

	# 로그
	ls       =log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lsa      =log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all
	lg       =log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --graph
	lga      =log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --graph --all
	ll       =log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --stat
	lla      =log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --stat --all
	ls-blame =blame --date=relative

	# pull 이후에 생긴 commit만 출력한다.
	#	git pull
	#	git new
	#	git new origin/master
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"'

	# 바뀐 파일 목록 출력
	changes=diff --name-status -r

	# 바뀐 파일들의 양 출력
	diffstat=diff --stat -r
	sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'

	# recursive 버전
	rdiff="!bash -c      \"  find . -name .git | sed -n 's/\\.git//gp' > /tmp/.tmp1 &&\n cat /tmp/.tmp1 | while read line \n do echo \\\"Entering directory: \\$line\\\" \n       git --work-tree=\\$line --git-dir=\\$line/.git diff            \n echo \\\"Leaving directory: \\$line\\\" \n echo \n done \""
	rdiff-stat="!bash -c \"  find . -name .git | sed -n 's/\\.git//gp' > /tmp/.tmp1 &&\n cat /tmp/.tmp1 | while read line \n do echo \\\"Entering directory: \\$line\\\" \n       git --work-tree=\\$line --git-dir=\\$line/.git diff --stat     \n echo \\\"Leaving directory: \\$line\\\" \n echo \n done \""
	rstatus="!bash -c    \"  find . -name .git | sed -n 's/\\.git//gp' > /tmp/.tmp1 &&\n cat /tmp/.tmp1 | while read line \n do echo \\\"Entering directory: \\$line\\\" \n       git --work-tree=\\$line --git-dir=\\$line/.git status          \n echo \\\"Leaving directory: \\$line\\\" \n echo \n done \""
	rfetch="!bash -c     \"  find . -name .git | sed -n 's/\\.git//gp' > /tmp/.tmp1 &&\n cat /tmp/.tmp1 | while read line \n do echo \\\"Entering directory: \\$line\\\" \n       git --work-tree=\\$line --git-dir=\\$line/.git fetch           \n echo \\\"Leaving directory: \\$line\\\" \n echo \n done \""
	rst=!git rstatus

	# 해당 함수의 변경사항만 출력한다.
	#	funcdiff <old-rev> <new-rev> <path> <function>
	#	funcdiff HEAD HEAD^ init/main.c start_kernel
	funcdiff = !sh -c \"git show \\\"\\$0:\\$2\\\" | sed -n \\\"/^[^ \\t].*\\$3[ \\t]*(/,/^}/p\\\" > .tmp1 &&\n        git show \\\"\\$1:\\$2\\\" | sed -n \\\"/^[^ \\t].*\\$3[ \\t]*(/,/^}/p\\\" > .tmp2 &&\n        git diff --no-index .tmp1 .tmp2\"


	# 충돌 났을때 보는 용도?
	gitkconflict = !gitk --left-right HEAD...MERGE_HEAD


	# 서버만들기
	#	`git clone git://127.0.0.1/project-name.git` 명령 사용가능
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

	
